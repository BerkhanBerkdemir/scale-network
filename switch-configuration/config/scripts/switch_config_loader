#!/usr/bin/env perl
#
# This script is intended as a replacement for former scripts:
#        bulk_local_load_switches
#        override_switches
#        update_switches
#
# Basic functionality of those three scripts was very similar, and the intent here is to both
# replace the antiquated and hacky originals with a version built on the Loader.pm library
# which is built on expect and contains the reusable portions of all of those scripts that
# can then be improved in one place providing benefit to all these functions.
#
# Original funciton/intent of the initial scripts:
#
# bulk_local_laod_switches
#        Built on override_switches, but optimized for loading multiple switches
#        at a work party or similar situation.
#
# override_switches
#        Send out updated configurations to switches and apply them in situ
#        using "load override" functionality.
#
# update_switches
#        A predecessor to override switches rendered obsolete by the development
#        of override switches, long overdue for retirement.
#
#
# New finctionality:
#
# command line usage:
#   switch_config_loader [-b] [-c <filename>] [-l] [-n] [-t <target>] [<switch_spec>]
#
#       -b -- Run in bulk mode, loop forever trying to install on each switch
#           attached. Implies -l.
#
#       -c <filename> -- Use <filename> to configure every affected switch
#
#       -l -- Local Mode -- Use 192.168.255.76 to reach switch unless -t
#           is specified.
#
#       -n -- No-Apply -- Send out the configuration, do the show | compare,
#           but do not apply the configuration, rollback instead.
#
#       -t <target> -- Specify the target. <target> can be a host name, an
#           IP address, or a /dev/ name. If /dev/, then it is treated as a
#           Serial Port. Otherwise, treated as a Host Name or IP Address
#           and passed unchecked to library routines for connecting to the
#           switch. Implies -l.
#
#       <switch_spec> -- One or more switch names and/or groups
#           Cannot be used with -l or any of the options that imply -l
#             unless it resolves to a single switch.
#           For more informoation on groups, see the "expand_switch_groups()"
#           function in switch_template.pl (POD coming soon)
#
# Examples of common tasks:
#
# Work party -- Load miniconfig onto a bunch of switches via serial port
#
#   switch_config_loader -b -c miniconfig -t /dev/ttyUSBA
#
# Work party -- Load configs onto a bunch of switches via direct attached
#   ethernet connection. (Note: local ethernet interface must have an
#   address other than 192.168.255.76 on the 192.168.255.0/24 network)
#
#   switch_config_loader -b -l
#
# Testing -- Test loading a config onto a locally attached switch
#
#     switch_config_loader -l -n
#
#   or several switches:
#
#     switch_config_loader -b -l -n
#
# Conference -- Update the configuration on all switches in groups I, and W
#
#     switch_config_loader I W
#
use strict;
require "./scripts/switch_template.pl" || die("Couldn't load switch_template Library\n");;
use "./Loader.pm" || die("Couldn't load Loader library\n");

use Getopt::Std;
our $opt_b;
our $opt_c;
our $opt_l;
our $opt_n;
our $opt_t;
getopts('bc:lnt:');

# Check for incompatible arguments.
$opt_l = 1 if ($opt_b);
$opt_l = 1 if ($opt_t);

my @list = @ARGV;

# We need to pretend there's exactly one switch_spec for later test, but it will be
# ignored in the case of opt_c.
if ($opt_c && $opt_l && scalar(@list) == 0)
{
  @list = ("none_required");
}

if (scalar(@list) == 0)
{
  @list = @{get_switchlist()};
  print "Pulled ", scalar(@list), " switches from configuration list\n";
}
else
{
  print "Have ", scalar(@list), " Switch or group names from command line.\n";
}

@list = expand_switch_groups(@list);

print "LIst expandsion yielded ", scalar(@list), "Switch names.\n";


if ($opt_l && (scalar(@list) != 1)
{
  die("Use of -l option (or -b or -t) requires exactly one switch be specified.\n");
}

if ($opt_c)
{
  die("Cannot read configuration file $opt_c specified on command line.\n") unless(-r "$opt_c");
}

if ($opt_t =~ /^\/dev\//)
{
  die("Cannopt open (Serial) device $opt_t specified on command line.\n") unless(open(JUNIPER, "+<$opt_t"));
  close JUNIPER;
}

unless($opt_b)
{
  # Not bulk mode, so let's just process the list.
  foreach my $switch (@list)
  {
    $switch = undef if ($switch =~ /none_required/);
    process_switch($switch, $opt_t, $opt_c);
  }
  exit 0;
}

while (1)
{
  # Bulk mode
}

sub process_switch
{
  # Process a given switch
  my $switch = shift @_;
  my $target = shift @_;
  my $config = shift @_;

  
}
