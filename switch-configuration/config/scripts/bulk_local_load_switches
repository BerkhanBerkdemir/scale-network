#!/usr/bin/perl
#
# Override the current configuration on a switch with the appropriate configuration file from
# the output directory. Uses SCP to place the configuratino file and then uses SSH to load and
# activate it.

# Based on override_switches script, but optimized for sequential bulk loading of switches in sequence
#
# General theory:
# 	Each switch should have a common configuration on the management ethernet interface (me-0):
#		192.168.255.76/24 (If this changes, update the $IP variable definition below)
#
#	The system where this software is running should have an interface set up on that same network.
#
#	1. Delete 192.168.255.76 from the local ARP cache. -- Deprecated
#	2. ping 192.168.255.76 until success
#	3. Get MAC address of 192.168.255.76 from ARP table.
#	4. Identify switch name based on MAC address lookup in switchtypes file (column 9 Mgmt MAC -> Column 1 Name)
#	5. Load appropriate configuration from "output" directory onto switch based on the name.
#	6. When complete, notify user and ping 192.168.255.76 until failure.
#	7. Repeat beginning with step 1 above.

# Not yet ready for use... Do not use
#die "Don't use this script yet. It's not ready";

my $IP = "192.168.255.76"; # Switch target management IP

#print "This program requires privileged operations. As such, it uses sudo to gain privileges when necessary.\n";
#print "The following test will confirm that you are able to provide the necessary credentials.\n";
#print "It may prompt for a password. If so, enter your local user password on this system.\n";
#print "You may occasionally be prompted to re-enter this password when you start to load a new switch.\n";
#print "If you are ever prompted to enter a password while this script is running, this is why and you should use that password.\n";

#my $result = system("sudo", "date");
#if ($result)
#{
#    die("SUDO result: $result -- fail\n");
#}

# Pull in dependencies
use strict;
require "./scripts/switch_template.pl";
use FileHandle;
use IPC::Open2;
use Getopt::Std;
our $opt_n;
our $opt_l = 1;
our $opt_u = "";
getopts('nu:');

# -n -- Don't actually apply the configuration, just show the compare and then roll back.

STDERR->autoflush(1);   # Turn on autoflush for STDERR

# Prime the switch database
get_switchtype("anonymous");

while (1) {
    
    # delete ARP entry for 192.168.255.76 (Requires sudo for privileges)
    # Turns out to be unnecessary and annoying.
    # system("sudo", "arp","-d","$IP");
    
    # ping $IP until success
    my $success = 0;
    print "Looking for switch on line.\n";
    do {
        ## FIXME ## Clean this up to avoid using a shell call.
        my $result = system("ping -t 1 -c 1 $IP >/dev/null 2>/dev/null");
        $success++ unless($result);
        sleep 1; # Retry every second until success.
    } until($success);
    
    print "Switch detected, identifying.\n";
    my $arp = `arp -n $IP | grep $IP`;
    chomp($arp);
    $arp = lc($arp);
    # Harry regex to support differing arp outputs (BSD vs. Linux vs. MacOS)
    $arp =~ s@^.*(at|ether)\s+([0-9a-f:]+)\s+.*$@\2@m;
    if ($arp =~ /\n/)
    {
        warn("Multiple ARP table entries for address $IP:\n");
        foreach(split(/\n/, $arp))
        {
            warn("\t$_\n");
        }
        warn("Basing configuration load on first one.\n");
        $arp =~ s/\n.*//;
    }
    
    print "Looking for MAC $arp in switchtypes table...";
    my @switchname = get_switch_by_mac($arp);
    print "Got ", scalar(@switchname), " names back from get_switch_by_mac($arp)\n";
    
    if (scalar(@switchname) < 1)
    {
        print STDERR "Error: No switchtype entry matching $arp\n";
        sleep 10;
        next; # Retry -- until file is corrected or a valid switch is provided
    }
    elsif (scalar(@switchname) > 1)
    {
        print STDERR "Error: $arp matches multiple switches (", join(", ", @switchname),").\n";
        sleep 10;
	get_switchtype("anonymous");
        continue; # Retry -- until file is corrected or a valid switch is provided
    }
    print "Found: $switchname[0].\n";
    my $switch = $switchname[0];

    # Assertions:
    #   output/* contains valid configuration files for each switch
    #   Switches are accessible via SSH at their management address in the switchtypes file.
    #	(unless -l in which case accessible via SSH on attached management interface)
    # Phase 1: Push new configuration file to switch.
    # Phase 2: Apply new configuration file using "load override <filename>" and commit it.
    #
    
    # Commands used for phase 2
    my $SWITCH_COMMANDS;
    unless ($opt_n) {
        $SWITCH_COMMANDS = <<EOF;
edit
load override /tmp/new_config.conf
show | compare
commit and-quit
exit
EOF
    }
    else
    {
        $SWITCH_COMMANDS = <<EOF;
edit
load override /tmp/new_config.conf
show | compare
rollback
exit
exit
EOF
    }
    
    $SIG{PIPE} = \&catch_pipe;
    
    my ($Name, $Num, $MgtVL, $IPv6Addr, $Type);
    print "Looking up switch $switch\n";
    ($Name, $Num, $MgtVL, $IPv6Addr, $Type) = (get_switchtype($switch));
    die("Error: Couldn't get type for $switch (got $Name)\n") unless $Name eq $switch; 
    print "Got Entry:  $Name, $Num, $MgtVL, $IPv6Addr, $Type for $switch\n";

    # Phase 1: Copy configuration to device
    if (!-f "output/$Name.conf")
    {
        die("Error: Couldn't read configuration file for $Name");
    }
    ##FIXME## Using system is an attrocious hack -- do something better (ideally expect.pm)
    print STDERR "Sending configuration file to $Name\n";
    if ($opt_l) # If -l is specified, install configuration via directly attached management port
    {
        my $result;
        if($result = system("scp \"output/$Name.conf\" owen\@$IP".":/tmp/new_config.conf"))
        {
            while ($result == 1 || $result == 256)
            {
                # Connection error, probably switch isn't fully online
                print STDERR "Switch didn't accept SCP, retrying in 5 seconds.\n";
                sleep 5; 
                $result = system("scp \"output/$Name.conf\" owen\@$IP".":/tmp/new_config.conf");
            }
            if ($result)
            {
                # Something else went wrong, probably can't recover.
                die("Failed to copy configuration (on retry) to device $Name ($result : $!)\n");
            }
        }
    }
    else
    {
        die("Failed to copy configuration to device $Name ($? : $!)\n") if 
            system("scp \"output/$Name.conf\" $Name".":/tmp/new_config.conf");
    }
    
    print STDERR "Activating...\n";
    if ($opt_l) # If -l is specified, activate configuration via directly attached management port
    {
        my $TARGET = $opt_u ? "$opt_u\@$IP" : "$IP";
        open(JUNIPER, "| ssh $TARGET");
    }
    else
    {
        my $TARGET = $opt_u ? "$opt_u\@$Name" : "$Name";
        open(JUNIPER, "| ssh $TARGET");
    }
    print JUNIPER $SWITCH_COMMANDS;
    print STDERR "Finished sending commands to switch...\n";
    unless(close JUNIPER)
    {
        warn "Switch $Name Bad exit from SSH: $! $?\n";
    }
    else
    {
        print STDERR "$Name successfully loaded.\n";
    }

    # Wait for the switch to go off line before trying to find next switch.
    $success = 1;
    do {
        ## FIXME ## Clean this up to avoid using a shell call (or system altogether, TBH).
        my $result = system("ping -t 1 -c 1 $IP >/dev/null 2>/dev/null");
	$success=0 if($result);
        sleep 1; # Retry every second until success.
    } while($success);
    
    print STDERR "\n\nReady for next switch.\n\n";
    
}


sub catch_pipe {
    my $signame = shift;
    print STDERR "Pipe signal cauthg ($signame) $! $?\n";
}

